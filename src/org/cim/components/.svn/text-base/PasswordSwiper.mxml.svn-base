<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="org.cim.components.*"
		 width="500" height="500" mouseDown="beginSwipe()"
		 creationComplete="randomizeHand()" 
		 scaleX="{dataShop.appWidth == 1920 ? 1 : 0.8}" 
		 scaleY="{dataShop.appWidth == 1920 ? 1 : 0.8}">
		 <!-- was scaleX="0.8" scaleY="0.8" for 1600x900, 1 for 1920x1080 -->
	
	<fx:Metadata>
		[Event(name="swipingStarted", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import org.cim.DataShop;
			
			[Bindable]
			/**
			 * The app's data shop.
			 */
			private var dataShop:DataShop = DataShop.instance;
			
			[Bindable]
			/**
			 * The password that has been entered in the swiper.
			 */
			public var password:String = "";
			
			[Bindable]
			/**
			 * Whether are not we are currently entering a password.
			 */
			private var enteringPassword:Boolean = false;
			
			/**
			 * The previous square that was swiped.
			 */
			private var lastSwipedSquare:SwiperSquare;
			
			/**
			 * The collection of swiper lines used to mark a password.
			 */
			private var swiperLines:Array;
			
			/**
			 * The current swiper line that is following the mouse.
			 */
			private var currentSwiperLine:SwiperLine;
			
			[Bindable]
			/**
			 * The style of hand labeling we want.
			 * Can we "login" or "signup", login will be the default.
			 */
			public var labelStyle:String = "login";
			
			/**
			 * Handles a mouse down event.
			 * Starts the password entry.
			 */
			private function beginSwipe(event:MouseEvent = null):void {
				// only act if we are not currently entering a password
				if(!enteringPassword) {
					// clean up
					clean();
					
					// mark that we are entering the password
					enteringPassword = true;
					
					// listen for a swipe to end (aka the mouse goes up)
					stage.addEventListener(MouseEvent.MOUSE_UP, endSwipe);
					
					// listen for the swipe to move around
					stage.addEventListener(MouseEvent.MOUSE_MOVE, followSwipe);
					
					// hide the hand
					hand.visible = false;
					
					// dispatch a swiping started event
					this.dispatchEvent(new Event("swipingStarted"));
				}
			}
			
			/**
			 * Cleans the password area.
			 */
			public function clean():void {
				// reset the password string
				password = "";
				
				// reset the squares
				for(var i:int = 0; i < 16; i++) {
					this['square' + i].hasBeenSwiped = false;
				}
				
				// reset the last swiped square
				lastSwipedSquare = null;
				
				// reset the swiper lines
				for each(var line:SwiperLine in swiperLines) {
					//stage.removeChild(line);
					this.removeElement(line);
				}
				swiperLines = new Array();
				currentSwiperLine = null;
				
				// show the hand
				hand.visible = true;
			}
			
			/**
			 * Handles a mouse up event.
			 * End the password entry.
			 */
			private function endSwipe(event:MouseEvent = null):void {
				// only end if we are swiping
				if(enteringPassword) {
					// mark that we are no longer entering the password
					enteringPassword = false;
					
					// remove the end swipe listener
					stage.removeEventListener(MouseEvent.MOUSE_UP, endSwipe);
					
					// remove the swipe move listener
					stage.removeEventListener(MouseEvent.MOUSE_MOVE, followSwipe);
					
					// remove any loose swiper line
					if(currentSwiperLine) {
						var line:SwiperLine = swiperLines.pop();
						//stage.removeChild(line);
						this.removeElement(line);
					}
				}
			}
			
			/**
			 * Handles a mouse move event.
			 * Moves a line around to follow the mouse.
			 */
			private function followSwipe(event:MouseEvent):void {
				if(currentSwiperLine) {
//					currentSwiperLine.width = event.stageX - currentSwiperLine.x;
//					currentSwiperLine.height = event.stageY - currentSwiperLine.y;
					var point:Point = this.globalToLocal(new Point(event.stageX, event.stageY));
					
					currentSwiperLine.width = point.x - currentSwiperLine.x;
					currentSwiperLine.height = point.y - currentSwiperLine.y;
					currentSwiperLine.draw();
				}
			}
			
			/**
			 * Handles a swipe event from a swiper square.
			 * Adds the password value to the password string.
			 */
			private function buildPassword(event:Event):void {
				// if we are entering the password...
				if(enteringPassword) {
					// take the targetted swiper square's defined password value
					var swiper:SwiperSquare = event.target as SwiperSquare;
					password += swiper.passwordValue;
					
					// mark the square as swiped
					swiper.fillSquare();
					
					// park the last swiper line
					if(lastSwipedSquare) {
						currentSwiperLine.width = swiper.x - lastSwipedSquare.x;
						currentSwiperLine.height = swiper.y - lastSwipedSquare.y;
						currentSwiperLine.draw();
					}
					
					// start a new line
					// but only start a new one if there are squares left!
					if(swiperLines.length >= 15) {
						currentSwiperLine = null;
						return;
					} else {
						// create the line and store it
						var line:SwiperLine = new SwiperLine();
						//stage.addChild(line);
						this.addElement(line);
						swiperLines.push(line);
						
						// get the global coordinates
						//var point:Point = this.localToGlobal(new Point(swiper.x, swiper.y));
						var point:Point = new Point(swiper.x, swiper.y);
						
						// position it in the center of the swiper
						line.x = point.x + (swiper.width / 2);
						line.y = point.y + (swiper.height / 2);
						line.draw();
						currentSwiperLine = line;
						
						// store this square as the last one swiped
						lastSwipedSquare = swiper;
					}
				}
			}
			
			/**
			 * Handles the visibility of the hand becoming true.
			 * Randomizes the position of the hand's location
			 */
			private function randomizeHand():void {
				// randomize it's position
				var squareNumber:int = Math.floor(Math.random() * 12);
				
				// get the random square
				var randomSquare:SwiperSquare = this['square' + squareNumber] as SwiperSquare;
				
				// move the hand to those coordinates
				hand.x = randomSquare.x;
				hand.y = randomSquare.y + 53.125;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Fade id="handFade" alphaFrom="{hand.alpha}" alphaTo="0" />
	</fx:Declarations>
	
	<components:SwiperSquare x="0" y="0" id="square0" passwordValue="01" swipe="buildPassword(event)" />
	<components:SwiperSquare x="131.25" y="0" id="square1" passwordValue="02" swipe="buildPassword(event)" />
	<components:SwiperSquare x="262.5" y="0" id="square2" passwordValue="03" swipe="buildPassword(event)" />
	<components:SwiperSquare x="393.75" y="0" id="square3" passwordValue="04" swipe="buildPassword(event)" />
	<components:SwiperSquare x="0" y="131" id="square4" passwordValue="05" swipe="buildPassword(event)" />
	<components:SwiperSquare x="131" y="131" id="square5" passwordValue="06" swipe="buildPassword(event)" />
	<components:SwiperSquare x="262" y="131" id="square6" passwordValue="07" swipe="buildPassword(event)" />
	<components:SwiperSquare x="393" y="131" id="square7" passwordValue="08" swipe="buildPassword(event)" />
	<components:SwiperSquare x="0" y="262" id="square8" passwordValue="09" swipe="buildPassword(event)" />
	<components:SwiperSquare x="131" y="262" id="square9" passwordValue="10" swipe="buildPassword(event)" />
	<components:SwiperSquare x="262" y="262" id="square10" passwordValue="11" swipe="buildPassword(event)" />
	<components:SwiperSquare x="393" y="262" id="square11" passwordValue="12" swipe="buildPassword(event)" />
	<components:SwiperSquare x="0" y="393" id="square12" passwordValue="13" swipe="buildPassword(event)" />
	<components:SwiperSquare x="131" y="393" id="square13" passwordValue="14" swipe="buildPassword(event)" />
	<components:SwiperSquare x="262" y="393" id="square14" passwordValue="15" swipe="buildPassword(event)" />
	<components:SwiperSquare x="393" y="393" id="square15" passwordValue="16" swipe="buildPassword(event)" />
	
	<components:Hand id="hand" includeInLayout="false" x="0" y="53.125" currentState="{labelStyle}" show="randomizeHand()" />
</s:Group>
