<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" width="600" height="66">
	
	<fx:Metadata>
		[Event(name="playClicked", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			
			import org.cim.DataShop;
			import org.cim.vo.MusicPiece;
			import org.cim.vo.Score;
			
			import spark.components.supportClasses.ListBase;
			
			[Bindable]
			/**
			 * The app's data shop.
			 */
			private var dataShop:DataShop = DataShop.instance;
			
			/**
			 * Overrides the display list update function and changes the state of the 
			 * renderer depending on the selection status (shrunken if not selected, enlarged 
			 * if selected).
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				//figure out if this itemRenderer is selected
				//if(ListBase(owner).isItemSelected(data)) {
				if(ListBase(owner).selectedItem == data) {
					// we're selected, so enlarge the view
					this.height = 260;
					this.currentState = "expanded";
				} else {
					// we're not currently selected, so shrink the view
					this.height = 66;
					this.currentState = "shrunk";
				}
				
				// draw the bottom line and background box
				with(graphics) {
					// prepare
					clear();
					lineStyle(1, 0x999999);
					
					// draw line
					moveTo(0, this.height);
					lineTo(this.width, this.height);
					
					// draw box
					lineStyle(0, 0xCCCCCC, 0);
					beginFill(0xCCCCCC, 0.0);
					drawRect(0, 0, this.width, this.height);
				}
			}
			
			/**
			 * Processes the data and extracts the instruments included.
			 * Returns an array collection of the instruments included.
			 */
			private function processInstrumentsIncluded(musicPiece:*):ArrayCollection {
				var instruments:ArrayCollection = new ArrayCollection();
				
				// loop through each score attached and extract its instrument
				for each(var score:Score in musicPiece.scores) {
					// add the parent instrument if there is one
					if(score.instrument.parentInstrument) {
						// only add it if it doesn't already exist
						if(!instruments.contains(score.instrument.parentInstrument)) {
							instruments.addItem(score.instrument.parentInstrument);
						}
					} else {
						// otherwise just add the instrument
						instruments.addItem(score.instrument);
					}
				}
				
				return instruments;
			}
			
			/**
			 * Handles a click on the play button.
			 * Tells the list owner that we want to play this music piece.
			 */
			private function playThis():void {
				ListBase(owner).dispatchEvent(new Event("playClicked"));
			}
			
			/**
			 * Creates a string of concatenated genres from an array 
			 * collection of them.
			 */
			private function convertGenres(genres:ArrayCollection):String {
				// return "none" if there are no genres
				if(genres.length == 0) {
					return "None";
				}
				
				// otherwise create the list!
				var list:String = "";
				
				for(var i:int = 0; i < genres.length; i++) {
					list += genres.getItemAt(i).genreName;
					
					// add a comma if we are not at the end
					if(i < genres.length - 1) {
						list += ", ";
					}
				}
				
				return list;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:State name="shrunk" />
		<s:State name="expanded" />
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout paddingTop="12" paddingLeft="15" paddingRight="30" 
							paddingBottom="12" verticalAlign="middle" horizontalAlign="left"
							gap="18" />
	</s:layout>
	
	<!-- Shrunk State -->
	<s:BorderContainer width="42" height="42" borderStyle="solid" 
					   borderColor="0x999999" borderWeight="1" includeIn="shrunk">
		<mx:Image source="http://173.203.94.109/thumbnails/{data.thumbnailSet}" width="100%" height="100%" smoothBitmapContent="true" />
	</s:BorderContainer>
	
	
	<fx:Binding source="{dataShop.appWidth == 1920 ? 21 : 16.5}" destination="shrunkenPieceName.percentWidth" />
	<s:VGroup id="shrunkenPieceName" height="100%" verticalAlign="middle" includeIn="shrunk">
		<!-- clipAndEnableScrolling="true"--><!-- width was 16.5% for 1600x900, 21% for 1920x900 -->
		<s:Label text="{data.pieceName}" width="{.18 * this.width}" fontWeight="bold" paddingBottom="-4" maxDisplayedLines="1" />
		<s:Label text="by {data.composer}" />
	</s:VGroup>
	
	<fx:Binding source="{dataShop.appWidth == 1920 ? 18 : 20}" destination="shrunkenGenre.percentWidth" />
	<s:VGroup id="shrunkenGenre" width="18%" height="100%" verticalAlign="bottom" includeIn="shrunk">
		<!-- width was 20% for 1600x900, 18% for 1920x1080 -->
		<s:Label text="GENRE" styleName="grayTitle" />
		<s:Label text="{convertGenres(data.genres as ArrayCollection)}" />
	</s:VGroup>
	
	<fx:Binding source="{dataShop.appWidth == 1920 ? 62 : 58}" destination="shrunkenDescription.percentWidth" />
	<s:Label id="shrunkenDescription" text="{data.description}" width="62%" height="100%" includeIn="shrunk" /> <!-- width was 58% for 1600x900, 62% for 1920x1080 -->
	
	<!-- Expanded State -->
	<s:BorderContainer width="216" height="216" borderStyle="solid" 
					   borderColor="0x999999" borderWeight="1" includeIn="expanded">
		<!--<s:VideoDisplay source="http://173.203.94.109/thumbnails/{data.thumbnailSet}" width="100%" height="100%" autoPlay="true" loop="true" />-->
		<mx:Image source="http://173.203.94.109/thumbnails/{data.thumbnailSet}" width="100%" height="100%" smoothBitmapContent="true" />
	</s:BorderContainer>
	
	<s:VGroup width="23.5%" height="100%" verticalAlign="middle" includeIn="expanded" 
			  paddingTop="10" paddingBottom="10">
		<s:Label text="{data.pieceName}" width="{.21 * this.width}" styleName="header" maxDisplayedLines="1" />
		<s:Label text="by {data.composer}" />
		
		<mx:Spacer height="100%" />
		
		<s:Label text="ENSEMBLE" styleName="grayTitle" />
		<s:Label text="{data.performingEnsemble}" />
		
		<mx:Spacer height="100%" />
		
		<s:Label text="CONDUCTOR" styleName="grayTitle" />
		<s:Label text="{data.conductorName}" />
		
		<mx:Spacer height="100%" />
		
		<s:Label text="GENRE" styleName="grayTitle" />
		<s:Label text="{convertGenres(data.genres as ArrayCollection)}" />
	</s:VGroup>
	
	<s:VGroup width="58%" height="100%" verticalAlign="bottom" includeIn="expanded"
			  paddingTop="10" paddingBottom="20"> <!-- paddingBottom was 5 (original), 28 after -->
		<s:Label text="{data.description}" width="100%" height="100%" /> <!-- fontSize="16" maxDisplayedLines="6" -->
		<s:HGroup>
			<s:Label text="{'AVAILABLE\nINSTRUMENTS'}" styleName="grayTitle" paddingTop="3" paddingRight="22" />
			<s:List id="instrumentsIncludedList" width="100%" height="100%"
					dataProvider="{processInstrumentsIncluded(data)}" 
					itemRenderer="org.cim.components.InstrumentNameItemRenderer" 
					selectionColor="0xFFFFFF" rollOverColor="0xFFFFFF">
				<s:layout>
					<s:TileLayout verticalGap="0" horizontalGap="50" /> <!-- requestedRowCount was 4 -->
				</s:layout>
			</s:List>
		</s:HGroup>
	</s:VGroup>
	
	<!-- Play Button -->
	<s:Button label="Play >" x="{this.width - 30 - 150}" y="{this.height - 26 - 30}" width="150" 
			  height="30" includeInLayout="false" includeIn="expanded" click="playThis()" />
			  <!-- y was this.height-16-30 -->
	
</s:ItemRenderer>
