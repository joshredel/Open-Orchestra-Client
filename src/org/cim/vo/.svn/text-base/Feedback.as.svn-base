package org.cim.vo {
	import org.cim.AMFService;
	
	[RemoteClass(alias="org.cim.Feedback")]
	[Bindable]
	/**
	 * Feedback is content left on a recording.  It can be 
	 * typed, written, audio, video, and/or graphical.
	 */
	public class Feedback {
		/**************************************
		 * Instance Variables (Table Fields)
		 **************************************/
		/**
		 * The unique ID of the feedback.
		 */
		public var id:uint;
		
		
		/**
		 * Whether or not the feedback has been opened.
		 */
		private var _hasBeenRead:Boolean;
		
		/**
		 * Whether or not the feedback has been opened.
		 * 
		 * @internal
		 * Simply returns the private value.
		 */
		private function get hasBeenRead():Boolean {
			return _hasBeenRead;
		}
		
		/**
		 * @private
		 * Sets whether or not the feedback has been opened.
		 * Translates a string number into a boolean.
		 */
		private function set hasBeenRead(newValue:*):void {
			if(newValue == "0") {
				_hasBeenRead = false;
			} else {
				_hasBeenRead = true;
			}
		}
		
		/**
		 * The date the feedback was sent to the receiver.
		 */
		private var _sentDate:Date;
		
		/**
		 * The date the feedback was sent to the receiver.
		 * 
		 * @internal
		 * Simply returns the private value.
		 */
		public function get sentDate():Date {
			return _sentDate;
		}
		
		/**
		 * @private
		 * Sets the date the feedback was sent to the receiver.
		 * Converts the date from a string if it is coming from 
		 * the database via AMF remoting.
		 */
		public function set sentDate(newDate:*):void {
			_sentDate = AMFService.convertDateTimeToDate(newDate);	
		}
		
		/**
		 * The date the feedback was first read by the receiver.
		 */
		private var _openDate:Date;
		
		/**
		 * The date the feedback was first read by the receiver.
		 * 
		 * @internal
		 * Simply returns the private value.
		 */
		public function get openDate():Date {
			return _openDate;
		}
		
		/**
		 * @private
		 * Sets the date the feedback was first read by the receiver.
		 * Converts the date from a string if it is coming from 
		 * the database via AMF remoting.
		 */
		public function set openDate(newDate:*):void {
			_openDate = AMFService.convertDateTimeToDate(newDate);
		}
		
		/**
		 * The full name of the sender that is filled in if the sender 
		 * user is deleted from the system.
		 */
		public var deletedSenderFullName:String;
		
		/**
		 * The sort of feedback.
		 * It can be generated by a user (e.g. a professor commenting 
		 * on a student's work) or generated by the system (e.g. the 
		 * system performing analysis on the work and leaving feedback).
		 * Can be either "user" or "system".
		 */
		public var kind:String;
		
		/**
		 * @private
		 * The kinds of feedback that can be left.
		 */
		public static const KINDS:Array = [USER_FEEDBACK, SYSTEM_FEEDBACK];
		public static const USER_FEEDBACK:String = "user";
		public static const SYSTEM_FEEDBACK:String = "system";
		
		/**********************************************
		 * Instance Variables (Joined Fields/Tables)
		 **********************************************/
		/**
		 * The practice recording the feedback comments on.
		 */
		public var practiceRecording:PracticeRecording;
		
		/**
		 * The user leaving the feedback.
		 */
		public var authorUser:User;
		
		/**
		 * The content of the feedback.
		 */
		public var content:Content;
		
		/**************************************
		 * Other Doctrine-created Attributes
		 **************************************/
		public var __isInitialized__:Boolean;
	}
}